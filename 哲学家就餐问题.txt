// 当四个哲学家都走到准备吃饭就产生死锁
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/sem.h>


union semun{
        int val ;
} ;
int id ;
void p( int no ) {
        struct sembuf sb[1] ;
        sb[0].sem_num = no ;
        sb[0].sem_op = -1 ;
        sb[0].sem_flg = 0 ;
        semop( id , sb , 1 ) ;
}

void v( int no ) {
        struct sembuf sb[1] ;
        sb[0].sem_num = no ;
        sb[0].sem_op = 1 ;
        sb[0].sem_flg = 0 ;
        semop( id ,sb , 1 ) ;
}
void get2fork( int no ){
        int left = no ;
        // 右边的筷子为这虚假号加1，走完一轮需要模
        int right = ( no + 1 ) % 5 ;
//      p(left) ;
//      p(right) ;      
        struct sembuf sb[2] ;

        sb[0].sem_num = left ;
        sb[0].sem_op = -1 ;
        sb[0].sem_flg = 0 ;
        sb[0].sem_num = right ;
        sb[0].sem_op = -1 ;
        sb[0].sem_flg = 0 ;

        semop( id ,sb , 2 ) ;
}

void put2fork( int no ){
        int left = no ;
        // 右边的筷子为这虚假号加1，走完一轮需要模
        int right = ( no + 1 ) % 5 ;
        v(left) ;
                  v(right) ;
}
void zhexuejia( int no  ){
        for(;;){
                printf("%d开始思考....\n",no) ;
                //sleep(rand() %5) ;
                printf("%d饿了，准备吃饭....\n",no) ;

                get2fork( no ) ;

                printf("%d哲学家开始吃饭....\n",no) ;
                //sleep( rand()%3) ;
                printf("%d哲学家吃饭结束....\n",no) ;
                put2fork( no ) ;
        }
}
int main(){
          srand(getpid()) ;
        //创建信号量集
        id = semget(1234,5,IPC_CREAT | 0666) ;
        int i ;

        // 设置信号量集的初值为1
        union semun su ;
        su.val = 1 ;
        for( i = 0 ;i<5; ++i){
                semctl( id , i , SETVAL , su ) ;
        }

        // 创建五个哲学家
        int no  = 0 ;
        for( i = 1 ; i <= 5 ; i++){
                pid_t pid = fork() ;
                if ( pid == 0 ){
                        no = i ;
                        break ;
                }
        }

        zhexuejia( no ) ;
}
                                    